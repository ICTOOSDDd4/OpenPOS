# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET Testing

on:
  push:
    branches: 
      - "master"
      - "develop"
  pull_request:
    branches: 
      - "master"
      - "develop"
      - "feature**"
      - "bug**"
  
  workflow_dispatch:

env:
    DOTNETVERSION: 7.0.x

jobs:
 
  buildWindows:

    runs-on: windows-latest

    steps:  
    - uses: actions/checkout@v3
    - name: Setup .NET SDK ${{env.DOTNETVERSION}}
      uses: actions/setup-dotnet@v1
      with:
          dotnet-version: '${{env.DOTNETVERSION}}'
    
    - name: Install .NET MAUI
      shell: pwsh
      run: |
          & dotnet nuget locals all --clear
          & dotnet workload install maui --source https://aka.ms/dotnet6/nuget/index.json --source https://api.nuget.org/v3/index.json
          & dotnet workload install android ios maccatalyst tvos macos maui wasm-tools maui-maccatalyst --source https://aka.ms/dotnet6/nuget/index.json --source https://api.nuget.org/v3/index.json

    - name: Restore packages
      run: |
        cd 6.0/Apps/OpenPOS-Application/src/
        dotnet restore OpenPOS-Application.sln

    - name: Building
      run: dotnet build --no-restore 

    - name: Testing
      run: dotnet test --no-build --verbosity normal
          
#       - name: Build and Run UnitTests
#         shell: bash
#         run: |
#           dotnet build <path to unit test csproj>
#           dotnet test <path to unit test csproj> --no-build --verbosity normal

      # https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/certutil
      # commandline util to encode to base64 on windows
      
  buildAndroid:
      runs-on: windows-2022

      steps:
        - uses: actions/checkout@v2

        - name: Setup .NET SDK ${{env.DOTNETVERSION}}
          uses: actions/setup-dotnet@v1
          with:
            dotnet-version:  '${{env.DOTNETVERSION}}'

        - name: List installed .NET info
          shell: pwsh
          run: dotnet --info

        - name: Restore packages
          run: |
            cd 6.0/Apps/OpenPOS-Application/src/
            dotnet restore OpenPOS-Application.sln

        - name: Install .NET MAUI
          shell: bash
          run: |
            dotnet nuget locals all --clear 
            dotnet workload install maui --source https://aka.ms/dotnet6/nuget/index.json --source https://api.nuget.org/v3/index.json
            dotnet workload install android ios maccatalyst tvos macos maui wasm-tools --source https://aka.ms/dotnet6/nuget/index.json --source https://api.nuget.org/v3/index.json

          # https://docs.microsoft.com/en-us/dotnet/maui/android/deployment/overview
        - name : Build Android App
          shell: bash
          run: |
            cd 7.0/Apps/OpenPOS-Application/src
            dotnet publish -f:net7.0-android -c:Release
            
        # # Store Android Signing Keystore and password in Secrets using base64 encoding
        # # https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/certutil
        # # commandline util to encode to base64 on windows
        # - name: Extract Android signing key from env
        #   shell: bash
        #   run: |
        #     echo "${{ secrets.RELEASE_KEYSTORE }}" > android/release.jks.base64
        #     base64 -d android/release.jks.base64 > android/release.decrypted.jks

        # # check android SDK paths etc in installed VM : https://github.com/actions/virtual-environments#available-environments
        # - name: Sign dev build
        #   shell: bash
        #   run: jarsigner -keystore android/release.decrypted.jks -storepass "${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" -signedjar ./android/app/build/outputs/bundle/release/app-release-signed.aab ./android/app/build/outputs/bundle/release/app-release.aab release

  #       - name: Build and Run UnitTests
  #         shell: bash
  #         run: |
  #           dotnet build <path to unit test csproj>
  #           dotnet test <path to unit test csproj> --no-build --verbosity normal

  buildmacCatalyst:
    runs-on: macos-12
    
    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET SDK ${{env.DOTNETVERSION}}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version:  '${{env.DOTNETVERSION}}'
          
      - name: List installed .NET info
        shell: pwsh
        run: dotnet --info

      - name: Restore packages
        run: |
          cd 6.0/Apps/OpenPOS-Application/src/
          dotnet restore OpenPOS-Application.sln

      - name: Install .NET MAUI
        shell: bash
        run: |
          dotnet nuget locals all --clear 
          dotnet workload install maui --source https://aka.ms/dotnet6/nuget/index.json --source https://api.nuget.org/v3/index.json
          dotnet workload install android ios maccatalyst tvos macos maui wasm-tools --source https://aka.ms/dotnet6/nuget/index.json --source https://api.nuget.org/v3/index.json
        
        # https://docs.microsoft.com/en-us/dotnet/maui/macos/deployment/overview
      - name : Build MacCatalyst App
        shell: bash
        run: |
          cd 7.0/Apps/OpenPOS-Application/src
          dotnet build -f net7.0-maccatalyst -c Release -o ./artifacts
          dotnet publish -f net7.0-maccatalyst -c Release -p:BuildIpa=True -o ./artifacts

#       - name: Build and Run UnitTests
#         shell: bash
#         run: |
#           dotnet build <path to unit test csproj>
#           dotnet test <path to unit test csproj> --no-build --verbosity normal

      - uses: actions/upload-artifact@v2
        with:
          name: artifacts-mac
          path: |
            6.0/Apps/OpenPOS-Application/src/artifacts/**/*.pkg
  
  buildiOS:
    runs-on: macos-12
    
    steps:
      - uses: actions/checkout@v2

      # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      # github docs for installing cert and provisioning profile
      
      - name: Install the Apple certificate and provisioning profile
                 
      - name: Setup .NET SDK ${{env.DOTNETVERSION}}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version:  '${{env.DOTNETVERSION}}'

      - name: Install .NET MAUI
        shell: bash
        run: |
          dotnet nuget locals all --clear 
          dotnet workload install maui --source https://aka.ms/dotnet6/nuget/index.json --source https://api.nuget.org/v3/index.json
          dotnet workload install android ios maccatalyst tvos macos maui wasm-tools --source https://aka.ms/dotnet6/nuget/index.json --source https://api.nuget.org/v3/index.json
    
      - name: Restore packages
        run: |
          cd 6.0/Apps/OpenPOS-Application/src/
          dotnet restore OpenPOS-Application.sln
        
        # https://docs.microsoft.com/en-us/dotnet/maui/ios/deployment/overview
      - name : Build iOS App
        shell: bash
        run: |
          cd 6.0/Apps/OpenPOS-Application/src
          dotnet build -f net6.0-ios -c Debug /p:packageApp=false /p:buildForSimulator=true /p:ArchiveOnBuild=false

#       - name: Build and Run UnitTests
#         shell: bash
#         run: |
#           dotnet build <path to unit test csproj>
#           dotnet test <path to unit test csproj> --no-build --verbosity normal

      - uses: actions/upload-artifact@v2
        with:
          name: artifacts-ios
          path: |
            6.0/Apps/OpenPOS-Application/src/OpenPOS-Application/bin/Debug/net6.0-ios/iossimulator-x64/**/*.app
      
